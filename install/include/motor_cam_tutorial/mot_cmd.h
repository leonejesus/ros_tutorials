// Generated by gencpp from file motor_cam_tutorial/mot_cmd.msg
// DO NOT EDIT!


#ifndef MOTOR_CAM_TUTORIAL_MESSAGE_MOT_CMD_H
#define MOTOR_CAM_TUTORIAL_MESSAGE_MOT_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_cam_tutorial
{
template <class ContainerAllocator>
struct mot_cmd_
{
  typedef mot_cmd_<ContainerAllocator> Type;

  mot_cmd_()
    : cmd(false)
    , mot_pos(0.0)  {
    }
  mot_cmd_(const ContainerAllocator& _alloc)
    : cmd(false)
    , mot_pos(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type;
  _cmd_type cmd;

   typedef float _mot_pos_type;
  _mot_pos_type mot_pos;





  typedef boost::shared_ptr< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct mot_cmd_

typedef ::motor_cam_tutorial::mot_cmd_<std::allocator<void> > mot_cmd;

typedef boost::shared_ptr< ::motor_cam_tutorial::mot_cmd > mot_cmdPtr;
typedef boost::shared_ptr< ::motor_cam_tutorial::mot_cmd const> mot_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_cam_tutorial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'motor_cam_tutorial': ['/home/leone/catkin_ws/src/motor_cam_tutorial/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "738fdb4e3563fa17b955dd65d43eb19c";
  }

  static const char* value(const ::motor_cam_tutorial::mot_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x738fdb4e3563fa17ULL;
  static const uint64_t static_value2 = 0xb955dd65d43eb19cULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_cam_tutorial/mot_cmd";
  }

  static const char* value(const ::motor_cam_tutorial::mot_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool cmd\n\
float32 mot_pos\n\
";
  }

  static const char* value(const ::motor_cam_tutorial::mot_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.mot_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mot_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_cam_tutorial::mot_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_cam_tutorial::mot_cmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "mot_pos: ";
    Printer<float>::stream(s, indent + "  ", v.mot_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_CAM_TUTORIAL_MESSAGE_MOT_CMD_H
